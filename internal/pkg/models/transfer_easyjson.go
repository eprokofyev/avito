// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD0c14475DecodeAvitoInternalPkgModels(in *jlexer.Lexer, out *TransferList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TransferList, 0, 8)
			} else {
				*out = TransferList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Transfer
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Transfer)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeAvitoInternalPkgModels(out *jwriter.Writer, in TransferList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TransferList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0c14475EncodeAvitoInternalPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0c14475EncodeAvitoInternalPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0c14475DecodeAvitoInternalPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0c14475DecodeAvitoInternalPkgModels(l, v)
}
func easyjsonD0c14475DecodeAvitoInternalPkgModels1(in *jlexer.Lexer, out *Transfer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sender_id":
			out.SenderID = uint(in.Uint())
		case "recipient_id":
			out.RecipientID = uint(in.Uint())
		case "amount":
			out.Amount = float64(in.Float64())
		case "message":
			out.Message = string(in.String())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeAvitoInternalPkgModels1(out *jwriter.Writer, in Transfer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SenderID != 0 {
		const prefix string = ",\"sender_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint(uint(in.SenderID))
	}
	if in.RecipientID != 0 {
		const prefix string = ",\"recipient_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.RecipientID))
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Amount))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if true {
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transfer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0c14475EncodeAvitoInternalPkgModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transfer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0c14475EncodeAvitoInternalPkgModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transfer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0c14475DecodeAvitoInternalPkgModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transfer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0c14475DecodeAvitoInternalPkgModels1(l, v)
}
func easyjsonD0c14475DecodeAvitoInternalPkgModels2(in *jlexer.Lexer, out *DBTransfer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SenderID":
			easyjsonD0c14475DecodeDatabaseSql(in, &out.SenderID)
		case "RecipientID":
			easyjsonD0c14475DecodeDatabaseSql(in, &out.RecipientID)
		case "Amount":
			out.Amount = float64(in.Float64())
		case "Message":
			easyjsonD0c14475DecodeDatabaseSql1(in, &out.Message)
		case "Date":
			easyjsonD0c14475DecodeDatabaseSql2(in, &out.Date)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeAvitoInternalPkgModels2(out *jwriter.Writer, in DBTransfer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SenderID\":"
		out.RawString(prefix[1:])
		easyjsonD0c14475EncodeDatabaseSql(out, in.SenderID)
	}
	{
		const prefix string = ",\"RecipientID\":"
		out.RawString(prefix)
		easyjsonD0c14475EncodeDatabaseSql(out, in.RecipientID)
	}
	{
		const prefix string = ",\"Amount\":"
		out.RawString(prefix)
		out.Float64(float64(in.Amount))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		easyjsonD0c14475EncodeDatabaseSql1(out, in.Message)
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		easyjsonD0c14475EncodeDatabaseSql2(out, in.Date)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBTransfer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0c14475EncodeAvitoInternalPkgModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBTransfer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0c14475EncodeAvitoInternalPkgModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBTransfer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0c14475DecodeAvitoInternalPkgModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBTransfer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0c14475DecodeAvitoInternalPkgModels2(l, v)
}
func easyjsonD0c14475DecodeDatabaseSql2(in *jlexer.Lexer, out *sql.NullTime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeDatabaseSql2(out *jwriter.Writer, in sql.NullTime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD0c14475DecodeDatabaseSql1(in *jlexer.Lexer, out *sql.NullString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeDatabaseSql1(out *jwriter.Writer, in sql.NullString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD0c14475DecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullInt32) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Int32":
			out.Int32 = int32(in.Int32())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeDatabaseSql(out *jwriter.Writer, in sql.NullInt32) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Int32\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Int32))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
